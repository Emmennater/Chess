:root {
    --board-size: calc(min(70vw, 70vh));
    /* --odd-color: #B58863; */ /* omg the AI actually got the right board color wtf??? */
    /* --even-color: #FFFFFF; */
    --odd-color: #B58863;
    --even-color: #F0D9B5;
}

.chessboard {
    display: grid;
    direction: ltr;
    gap: 0;
    width: var(--board-size);
    height: var(--board-size);
    background-color: #FFFFFF;
    transition: filter 0.2s;
}

.even-square {
    background-color: var(--even-color);
}

.odd-square {
    background-color: var(--odd-color);
}

.even-square.selected {
    background:
        linear-gradient(#88888860, #88888860),
        linear-gradient(var(--even-color), var(--even-color));
}

.odd-square.selected {
    background:
        linear-gradient(#88888860, #88888860),
        linear-gradient(var(--odd-color), var(--odd-color));
}

.even-square.possible-move {
    background:
        radial-gradient(#00000030 25%, transparent calc(25% + 1px)),
        linear-gradient(var(--even-color), var(--even-color));
}

.odd-square.possible-move {
    background:
        radial-gradient(#00000030 25%, transparent calc(25% + 1px)),
        linear-gradient(var(--odd-color), var(--odd-color));
}

.even-square.possible-capture {
    background:
        radial-gradient(transparent calc(75% - 1px), #00000030 75%),
        linear-gradient(var(--even-color), var(--even-color));
}

.odd-square.possible-capture {
    background:
        radial-gradient(transparent calc(75% - 1px), #00000030 75%),
        linear-gradient(var(--odd-color), var(--odd-color));
}

.even-square.attacked {
    background:
        linear-gradient(#ff000030, #ff000030),
        linear-gradient(var(--even-color), var(--even-color));
}

.odd-square.attacked {
    background:
        linear-gradient(#ff000030, #ff000030),
        linear-gradient(var(--odd-color), var(--odd-color));
}

.even-square.check {
    background:
        radial-gradient(ellipse at center, rgb(255, 0, 0) 0%, rgb(231, 0, 0) 25%, rgba(169, 0, 0, 0) 89%, rgba(158, 0, 0, 0) 100%),
        linear-gradient(var(--even-color), var(--even-color));
}

.odd-square.check {
    background:
        radial-gradient(ellipse at center, rgb(255, 0, 0) 0%, rgb(231, 0, 0) 25%, rgba(169, 0, 0, 0) 89%, rgba(158, 0, 0, 0) 100%),
        linear-gradient(var(--odd-color), var(--odd-color));
}

.square {
    width: 100%;
    height: 100%;
}

.piece {
    width: 100%;
    height: 100%;
    /* background-image: url('https://images.chesscomfiles.com/chess-themes/pieces/icy_sea/150/wk.png'); */
    background-size: cover;
    background-position: center;
    cursor: pointer;
    transition: transform 0.2s linear;
}

@property --x {
    syntax: '<number>';
    inherits: false;
    initial-value: 0.0;
}

.promotion-wrapper {
    display: none;
    position: absolute;
    background: radial-gradient(
        rgb(
            calc(220 * (1.0 - var(--x)) + 220 * var(--x)),
            calc(220 * (1.0 - var(--x)) + 180 * var(--x)),
            calc(220 * (1.0 - var(--x)) + 170 * var(--x))
        ),
        rgb(
            calc(120 * (1.0 - var(--x)) + 207 * var(--x)),
            calc(120 * (1.0 - var(--x)) + 89 * var(--x)),
            calc(120 * (1.0 - var(--x)) + 25 * var(--x))
        ) calc(var(--x) * 31% + 69%),
        transparent calc(var(--x) * 31% + 69% + 1px)
    );
    cursor: pointer;
    animation: colorChangeOut 0.15s ease forwards; /* Animation for when not hovered */
}

.promotion-wrapper:hover {
    animation: colorChangeIn 0.15s ease forwards; /* Animation for when hovered */
}

@keyframes colorChangeIn {
    from {
        --x: 0.0;
    }
    to {
        --x: 1.0;
    }
}

@keyframes colorChangeOut {
    from {
        --x: 1.0;
    }
    to {
        --x: 0.0;
    }
}

.promotion {
    position: absolute;
    width: 100%;
    height: 100%;
    background-size: cover;
    background-position: center;

    transform: scale(0.8);
    transition: transform 0.15s;
}

.promotion-wrapper:hover .promotion {
    transform: scale(1.0);
}
